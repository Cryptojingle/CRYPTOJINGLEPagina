import { EventEmitter2 } from 'eventemitter2';
import { ECIESProps } from './ECIES';
import { StorageManagerProps } from './types/StorageManager';
import { AutoConnectOptions } from './types/AutoConnectOptions';
import { ChannelConfig } from './types/ChannelConfig';
import { CommunicationLayer } from './types/CommunicationLayer';
import { CommunicationLayerMessage } from './types/CommunicationLayerMessage';
import { CommunicationLayerPreference } from './types/CommunicationLayerPreference';
import { ConnectionStatus } from './types/ConnectionStatus';
import { DappMetadataWithSource } from './types/DappMetadata';
import { DisconnectOptions } from './types/DisconnectOptions';
import { WalletInfo } from './types/WalletInfo';
import { WebRTCLib } from './types/WebRTCLib';
import { ServiceStatus } from './types/ServiceStatus';
import { CommunicationLayerLoggingOptions } from './types/LoggingOptions';
import { PlatformType } from './types/PlatformType';
type MetaMaskMobile = 'metamask-mobile';
export interface RemoteCommunicationProps {
    platformType: PlatformType | MetaMaskMobile;
    communicationLayerPreference: CommunicationLayerPreference;
    otherPublicKey?: string;
    webRTCLib?: WebRTCLib;
    reconnect?: boolean;
    dappMetadata?: DappMetadataWithSource;
    walletInfo?: WalletInfo;
    transports?: string[];
    analytics?: boolean;
    communicationServerUrl?: string;
    ecies?: ECIESProps;
    sdkVersion?: string;
    storage?: StorageManagerProps;
    context: string;
    autoConnect?: AutoConnectOptions;
    logging?: CommunicationLayerLoggingOptions;
}
export declare class RemoteCommunication extends EventEmitter2 {
    private ready;
    private authorized;
    private isOriginator;
    private paused;
    private otherPublicKey?;
    private webRTCLib?;
    private transports?;
    private platformType;
    private analytics;
    private channelId?;
    private channelConfig?;
    private walletInfo?;
    private communicationLayer?;
    private originatorInfo?;
    private originatorInfoSent;
    private dappMetadata?;
    private communicationServerUrl;
    private context;
    private storageManager?;
    private storageOptions?;
    private sdkVersion?;
    private autoConnectOptions;
    private clientsConnected;
    private sessionDuration;
    private autoStarted;
    private debug;
    private logging?;
    private _connectionStatus;
    constructor({ platformType, communicationLayerPreference, otherPublicKey, webRTCLib, reconnect, walletInfo, dappMetadata, transports, context, ecies, analytics, storage, sdkVersion, communicationServerUrl, logging, autoConnect, }: RemoteCommunicationProps);
    private initCommunicationLayer;
    private onCommunicationLayerMessage;
    startAutoConnect(): Promise<ChannelConfig | undefined>;
    generateChannelId(): Promise<{
        channelId: string;
        pubKey: string | undefined;
    }>;
    clean(): void;
    connectToChannel(channelId: string, withKeyExchange?: boolean): void;
    private handleAuthorization;
    sendMessage(message: CommunicationLayerMessage): Promise<void>;
    testStorage(): Promise<void>;
    private setLastActiveDate;
    getChannelConfig(): ChannelConfig | undefined;
    /**
     * Check if the connection is ready to handle secure communication.
     *
     * @returns boolean
     */
    isReady(): boolean;
    /**
     * Check the value of the socket io client.
     *
     * @returns boolean
     */
    isConnected(): boolean | undefined;
    isAuthorized(): boolean;
    isPaused(): boolean;
    getCommunicationLayer(): CommunicationLayer | undefined;
    ping(): void;
    keyCheck(): void;
    private setConnectionStatus;
    private emitServiceStatusEvent;
    getConnectionStatus(): ConnectionStatus;
    getServiceStatus(): ServiceStatus;
    getKeyInfo(): import(".").KeyInfo | undefined;
    resetKeys(): void;
    pause(): void;
    getVersion(): string;
    resume(): void;
    getChannelId(): string | undefined;
    disconnect(options?: DisconnectOptions): void;
}
export {};
//# sourceMappingURL=RemoteCommunication.d.ts.map