"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockEIP1193Provider = void 0;
const eventemitter3_1 = require("eventemitter3");
class MockEIP1193Provider extends eventemitter3_1.EventEmitter {
    constructor() {
        super(...arguments);
        this.eth_chainId = jest.fn((chainId) => chainId);
        this.eth_accounts = jest.fn((accounts) => accounts);
        this.eth_requestAccounts = jest.fn((accounts) => accounts);
    }
    request(x) {
        // make sure to throw if we're "not connected"
        if (!this.chainId)
            return Promise.reject(new Error());
        switch (x.method) {
            case 'eth_chainId':
                return Promise.resolve(this.eth_chainId(this.chainId));
            case 'eth_accounts':
                return Promise.resolve(this.eth_accounts(this.accounts));
            case 'eth_requestAccounts':
                return Promise.resolve(this.eth_requestAccounts(this.accounts));
            default:
                throw new Error(`Method not supported on mock: ${JSON.stringify(x)}`);
        }
    }
    emitConnect(chainId) {
        this.emit('connect', { chainId });
    }
    emitDisconnect(error) {
        this.emit('disconnect', error);
    }
    emitChainChanged(chainId) {
        this.emit('chainChanged', chainId);
    }
    emitAccountsChanged(accounts) {
        this.emit('accountsChanged', accounts);
    }
}
exports.MockEIP1193Provider = MockEIP1193Provider;
